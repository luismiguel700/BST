=== POSITIVE EXAMPLES

typecheck
openFile:(open->0);rdwrFile:((read;write)->0) | file:(open;(read|write);close)
(
	let 
		openFile2:open->0 = fun (f:open) -> 0 {openFile f} 
	in
	   let x:0 = openFile2 file in rdwrFile file
)

0

;;

typecheck
openFile2:open->0;rdwrFile:((read|write)->0)|file:open;(file:read|file:write);file:close
(
let x:0 = openFile2 file in rdwrFile file
)
0
;;

typecheck
fun1:(open->0);fun2:(close->0) | file:(open;close) 

(
	let f:(open;close)->0 = 
		fun (file:(open;close)) -> 0 
		{
			let temp:0 = fun1 file in let temp:0 = fun2 file in temp
		}
	in
		f file
)
0
;;

typecheck
(openFile:(open->0); rdwrFile:((read;write)->0)) | file:(open;(read|write);close)
(
	let 
		openFile2:open->0 = fun (f:0;open;0) -> 0 {openFile f} 
	in
		let temp:0 = openFile2 file in 
			let temp:0 = rdwrFile file in
				file.close
)

0

;;

typecheck
openFile:(open->0);rdwrFile:((read;write)->0) | file:(open;(read|write);close)
(
	let 
		openFile2:open->0 = fun (f:open) -> 0 {openFile f} 
	in
	   openFile2 
)

open->0

;;

typecheck
openFile:(open->0);rdwrFile:((read;write)->0) | file:(open;(read|write);close)
(
	let 
		openFile2:open->0 = fun (f:open) -> 0 {openFile f} 
	in
	   openFile2 file
)

0

;;

typecheck
openFile:(open->0);rdwrFile:((read;write)->0) | file:(open;(read|write);close)
(
	let 
		openFile2:open->0 = fun (f:open) -> 0 {openFile f} 
	in
	   let x:0 = openFile2 file in rdwrFile file
)

0

;;

typecheck
f : (open;close;run) | g:open
(
let x:0 = f.open in 
let y:0 = f.close in f.run
)
0
;;

typecheck
f : ((open -> R);S) | g:(open;close)
(
f g)
R
;;

typecheck
f : ((open -> R);S) | g:(open;close)
(
  let x:(open;close) = g in x

)
(open;close)
;;



typecheck
fun1:(open->0);fun2:(close->0) | filxe:(open;close) | foo:0

(
	let f:(open)->0 = 
		fun (file:(open)) -> 0 
		{
			let temp:0 = file.open in temp
		}
	in
		f
)

(open)->0

;;

typecheck
0
(
		fun (file:(open)) -> 0 
		{
			let temp:0 = file.open in temp
		}
)
(open)->0
;;

typecheck
f:(open -> 0)
(
		fun (file:(open)) -> 0 
		{
			f file
		}
)
open->0
;;

typecheck
f:(open -> 0);f:(close -> 0)
(
		fun (file:(open;close)) -> 0 
		{
			let x:0 = f file in let y:0 = f file in y
		}
)
(open;close)->0
;;

typecheck
f:(open -> 0);f:(close -> 0) | r:foo
(
let 
h:(open;close)->0 =
(
		fun (file:(open;close)) -> 0 
		{
			let x:0 = f file in let y:0 = f file in y
		}
)
in h
)
(open;close)->0
;;

typecheck
0
(
fun (x:0) -> 0 {x}
)
0 -> 0
;;


typecheck
0
(
(
fun (x:0) -> 0 {x}
) y)
0
;;



typecheck
y:foo
(
y
)
0
;;

typecheck
fun1:(open->0);fun2:(close->0) | file:(open;close) 

(
	let f:(open)->0 = 
		fun (file:(open)) -> 0 
		{
			let temp:0 = file.open in temp
		}
	in
		(f file)
)

0
;;

typecheck
f:0->0 | y:stop
(f y)
0
;;

typecheck
a:(foo;joo) |a:foo | c:fie
(a.foo)
0
;;

typecheck
f:(o;(r|w);c)
(
let x:(o;r;w) = f in 
  let y1:0 = x.o in
   let y2:0 = x.r in
    let y3:0 = x.w in f.c 
)
0
;;

typecheck
f:(o;(r->0|r);c;x)
(
let x:(o;(r->0|r)) = f in 
  let y1:0 = x.o in
   let y2:0 = (x x) in f.c 
)
0
;;


typecheck
f:(o;(0->0|r);c)
(
let x:(o;(0->0|r)) = f in
  x.o ; (x x.r) ; f.c 
)
0
;;

typecheck
f: (a|b;c|d)
(
let x:(a;b;d;c) = f in
let u1:0 = x.a in let u2:0 = x.b in let u3:0 = x.d in x.c
)
0
;;

typecheck
f: (a|b;c|d)
(
let x:(a;b;d;c) = f in
x.a ; x.b ; x.d ; x.c
)
0
;;

typecheck
f:a->b->c|x:a|y:(b;x)
(
f x y
)
c
;;

=== NEGATIVE EXAMPLES

typecheck
f: (a|b;c|d)
(
let x:(a;b;d;c) = f in
let u1:0 = x.a in let u2:0 = x.d in let u3:0 = x.b in x.c
)
0
;;

typecheck
f: (a|b;c|d)
(
let x:(a;b) = f in x.a
)
0
;;
